#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"

void syscall_handler (struct intr_frame *f UNUSED){
  int syscall_num = *(int *)(f->esp);
  switch(syscall_num){
    case SYS_EXIT:
      {
        int status=*((int *)f->esp+1);
        exit(status);
        break;
      }
    default:
      printf("Unknown call: %d\n", syscall_num);
      thread_exit();
  }
}

void exit(int status){
  const char *name = thread_current()->name;
  char process_name[32];
  strlcpy(process_name,name,sizeof process_name);
  
  printf("%s: exit(%d)\n",process_name,status);
  thread_exit();
}
void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}
