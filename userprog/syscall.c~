#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"
#include "threads/palloc.h"
#include "filesys/filesys.h"
#include "filesys/file.h"
#include "devices/block.h"
#include "vm/page.h"
#include "vm/frame.h"
void syscall_handler(struct intr_frame* f);
struct file* getfile(int fd);
void check_user_vaddr(const void* vaddr);

void
syscall_init (void) 
{
    lock_init(&file_lock);
    intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

void
syscall_handler (struct intr_frame *f) 
{
    void* sp = f->esp;
    uint32_t syscall_num = *(uint32_t*)(sp);

    switch (syscall_num) 
    {
        case SYS_HALT:
            halt();
            break;

        case SYS_EXIT:
            check_user_vaddr(sp + 4);
            exit(*(int*)(sp + 4));
            break;

        case SYS_EXEC:
            check_user_vaddr(sp + 4);
            f->eax = exec((const char*)*(uint32_t*)(sp + 4));
            break;

        case SYS_WAIT:
            check_user_vaddr(sp + 4);
            f->eax = wait((pid_t)*(uint32_t*)(sp + 4));
            break;

        case SYS_CREATE:
            check_user_vaddr(sp + 4);
            f->eax = create((const char*)*(uint32_t*)(sp + 4), (unsigned)*(uint32_t*)(sp + 8));
            break;

        case SYS_REMOVE:
            check_user_vaddr(sp + 4);
            f->eax = remove((const char*)*(uint32_t*)(sp + 4));
            break;

        case SYS_OPEN:
            check_user_vaddr(sp + 4);
            f->eax = open((const char*)*(uint32_t*)(sp + 4));
            break;

        case SYS_FILESIZE:
            check_user_vaddr(sp + 4);
            f->eax = filesize((int)*(uint32_t*)(sp + 4));
            break;

        case SYS_READ:
            check_user_vaddr(sp + 4);
            f->eax = read((int)*(uint32_t*)(sp + 4), (void*)*(uint32_t*)(sp + 8), (unsigned)*((uint32_t*)(sp + 12)));
            break;

        case SYS_WRITE:
            check_user_vaddr(sp + 4);
            f->eax = write((int)*(uint32_t*)(sp + 4), (void*)*(uint32_t*)(sp + 8), (unsigned)*((uint32_t*)(sp + 12)));
            break;

        case SYS_SEEK:
            check_user_vaddr(sp + 4);
            seek((int)*(uint32_t*)(sp + 4), (unsigned)*((uint32_t*)(sp + 8)));
            break;

        case SYS_TELL:
            check_user_vaddr(sp + 4);
            f->eax = tell((int)*(uint32_t*)(sp + 4));
            break;

        case SYS_CLOSE:
            check_user_vaddr(sp + 4);
            close((int)*(uint32_t*)(sp + 4));
            break;
//--------------ADDED--------------
	case SYS_MMAP:
	    f->eax = mmap((int)*(uint32_t*)(sp+4),
			(void*)*(uint32_t*)(sp+8));
	    break;
	case SYS_MUNMAP:
	    munmap((int)*(uint32_t*)sp+4);
	    break;
//---------------------------------
        default:
            exit(-1);
            break;
    }
}

void 
halt(void) 
{
    shutdown_power_off();
}

void 
exit(int status)
{
	struct thread* cur = thread_current();
    cur->exit_status = status;
    int i;
    for (i = 3; i < 128; i++) {
        if (cur->fd[i] != NULL)
            close(i);
    }

	printf("%s: exit(%d)\n", cur->name, status); // Process Termination Message
	thread_exit();
}

pid_t 
exec(const char* file)
{
    char *fn_copy = palloc_get_page(0);
    if (fn_copy == NULL)
        exit(-1);
    strlcpy(fn_copy, file, PGSIZE);
    pid_t tid = process_execute(fn_copy);
    palloc_free_page(fn_copy);
    return tid;
}

int
wait(pid_t pid)
{
    return process_wait(pid);
}

bool
create(const char* file, unsigned initial_size)
{
    if (file == NULL)
        exit(-1);
    return filesys_create(file, initial_size);
}

bool
remove(const char* file)
{
    if (file == NULL)
        exit(-1);
    return filesys_remove(file);
}

int
open(const char* file)
{
    if (file == NULL)
        exit(-1);
    
    lock_acquire(&file_lock);
    struct file* return_file = filesys_open(file);
    if (return_file == NULL) {
        lock_release(&file_lock);
        return -1;
    }

    int i;
    for (i = 3; i < 128; i++)
    {
        if (getfile(i) == NULL)
        {
            if (strcmp(thread_current()->name, file) == false)
                file_deny_write(return_file);
            thread_current()->fd[i] = return_file;
            lock_release(&file_lock);
            return i;
        }
    }
    lock_release(&file_lock);
    return -1;
}

int
filesize(int fd)
{
    struct file* f = getfile(fd);
    if (f == NULL)
        exit(-1);
    else
        return file_length(f);
}

int
read(int fd, void* buffer, unsigned size)
{
    check_user_vaddr(buffer);
    lock_acquire(&file_lock);
    if (fd == 0)
        return 0;
    else
    {
        struct file* f = getfile(fd);
        if (f == NULL)
        {
            lock_release(&file_lock);
            exit(-1);
        }
        int ret = file_read(f, buffer, size);
        lock_release(&file_lock);
        return ret;
    }
}

int
write(int fd, const void* buffer, unsigned size)
{
    check_user_vaddr(buffer);
    lock_acquire(&file_lock);
    if (fd == 1)
    {
        putbuf(buffer, size);
        lock_release(&file_lock);
        return size;
    }
    else
    {
        struct file* f = getfile(fd);
        if (f == NULL)
        {
            lock_release(&file_lock);
            exit(-1);
        }
        int ret = file_write(f, buffer, size);
        lock_release(&file_lock);
        return ret;
    }
}

void
seek(int fd, unsigned position)
{
    struct file* f = getfile(fd);
    if (f == NULL)
        exit(-1);
    else
        return file_seek(f, position);
}

unsigned
tell(int fd)
{
    struct file* f = getfile(fd);
    if (f == NULL)
        exit(-1);
    else
        return file_tell(f);
}

void
close(int fd)
{
    struct file* f = getfile(fd);
    if (f == NULL) {
        exit(-1);
    }
    file_close(f);
    thread_current()->fd[fd] = NULL;
}

struct file* 
getfile(int fd)
{
    return (thread_current()->fd[fd]);
}

void
check_user_vaddr(const void* vaddr)
{
    if (!is_user_vaddr(vaddr))
        exit(-1);
}

//--------------ADDED--------------

int mmap(int fd, void *vaddr){
  if (!vaddr || pg_ofs(vaddr) != 0 || fd<= 1) return -1;
  struct thread *cur = thread_current();

  lock_acquire(&file_lock);
  struct file *f = getfile(fd);
  if (!f){
    lock_release(&file_lock);
    return -1;
  }

  struct file *file = file_reopen(f);
  off_t length = file_length(file);
  if(length == 0){
    lock_release(&file_lock);
    return -1;
  }

  size_t read_bytes = length;
  off_t offset = 0;
  void *upage = vaddr;
  while(read_bytes >0){
    size_t page_read_bytes = read_bytes;
    if(page_read_bytes > PGSIZE) page_read_bytes = PGSIZE;    		
    size_t page_zero_bytes = PGSIZE - page_read_bytes;

    struct page *p = malloc(sizeof *p);
    if(!p) {
      lock_release(&file_lock);
      return -1;
    }
    p->vaddr=upage;
    p->file = file;
    p->read_bytes = page_read_bytes;
    p->offset = offset;
    p->writable = true;
    p->status = IN_DISK;

    if(hash_insert(&cur->spt,&p->hash_elem) != NULL){
      free(p);
      lock_release(&file_lock);
      return -1;
    }

    read_bytes -= page_read_bytes;
    offset += page_read_bytes;
    upage += PGSIZE;
  }

  struct mmap_entry *mmap = malloc(sizeof *mmap);
  if(mmap== NULL){
    lock_release(&file_lock);
    return -1;
  }

  mmap->file = file;
  mmap->start_addr = vaddr;
  mmap->length = length;
  int mapid = 1;
  if(!list_empty(&cur->mmap_list)){
    mapid = list_entry(list_back(&cur->mmap_list),struct mmap_entry,elem)->mapid + 1;
  }
  mmap->mapid = mapid;
  list_push_back(&cur->mmap_list,&mmap->elem);

  lock_release(&file_lock);
  return mapid;
}

void munmap(int mapid){
  struct thread *cur = thread_current();
  if(mapid == NULL) return;

  lock_acquire(&file_lock);

  struct list_elem *e = list_begin(&cur->mmap_list);
  for(;e!=list_end(&cur->mmap_list);e=list_next(e)){
    struct mmap_entry *mmap_e = list_entry(e,struct mmap_entry,elem);
    if(mmap_e->mapid == mapid){

      void *upage =mmap_e->start_addr;
      size_t length = mmap_e->length;		
      while(length>0){
	size_t page_read_bytes = length <PGSIZE ? length : PGSIZE;
	struct page *p = page_find(&cur->spt,upage);
	if(p != NULL){
          if(p->status == IN_FRAME && p->frame != NULL){
            if(pagedir_is_dirty(cur->pagedir, p->vaddr) ||
		pagedir_is_dirty(cur->pagedir, p->frame->paddr)){
              file_write_at(p->file,p->frame->paddr,p->read_bytes,p->offset);
            }

            free_frame_no_free_page(p->frame);
          }else if(p->status == IN_SWAP){
            if(pagedir_is_dirty(cur->pagedir,p->vaddr)){
//              void *page_temp = palloc_get_page(0);
//              swap_get(page_temp);
//TODO SWAP
//              file_write_at(p->file,page_temp,PGSIZE,p->offset);
//              palloc_free_page(page_temp);
            }else{
              //swap free
            }
          }
	  hash_delete(&cur->spt,&p->hash_elem);
	  free(p);
	}
        length -= page_read_bytes;
        upage += PGSIZE;
      }
      list_remove(e);
      file_close(mmap_e->file);
      free(mmap_e);
    }
  }
  lock_release(&file_lock);
  return;
}
//---------------------------------
